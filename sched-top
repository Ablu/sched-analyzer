#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
#
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2022 Qais Yousef

import argparse
import math
import pandas as pd
import plotext as plt
import readline
import shlex
import subprocess
import time

try:
    import argcomplete
except:
    pass


refresh_rate = 5 # seconds
display_window = 20 #seconds

num_top_tasks = 10

theme = 'default'

args = None


def parse_cmdline():
    parser = argparse.ArgumentParser(description='''
    sched-top

    Take a peak inside the scheduler in top like style.

    CTRL+c to exit.
    ''', formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('refresh_rate', type=float, default=5, nargs='?',
                    help='How often to refresh the graphs. Default 5 seconds.')
    parser.add_argument('display_window', type=float, default=20, nargs='?',
                    help='The window of time to display. Default last 20 seconds.')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--task', type=int, default=10, nargs='?', metavar='N',
                    help='Show util_avg of top N tasks. 10 by default.')
    group.add_argument('--rq', action='store_true',
                    help='Show cfs, rt and dl util_avg for all rqs.')
    group.add_argument('--rq_hist', action='store_true',
                    help='Show histogram of cfs, rt and dl util_avg for all rqs.')
    group.add_argument('--nr_running', action='store_true',
                    help='Show number of running tasks for all rqs.')
    group.add_argument('--nr_running_hist', action='store_true',
                    help='Show histogram of number of running tasks for all rqs.')
    group.add_argument('--nr_running_residency', action='store_true',
                    help='Show percentage of time spent in each queue length for all rqs.')
    # group.add_argument('--sched_switch', action='store_true',
    #                 help='Show context switch for all rqs.')
    group.add_argument('--freq', action='store_true',
                    help='Show frequency for all cpus.')
    group.add_argument('--freq_residency', action='store_true',
                    help='Show percentage of time spent in each frequency for all cpus.')
    group.add_argument('--idle', action='store_true',
                    help='Show idle states for all cpus.')
    group.add_argument('--idle_residency', action='store_true',
                    help='Show percentage of time spent in each idle state for all cpus.')
    group.add_argument('--softirq', action='store_true',
                    help='Show duration of each softirq for all cpus.')
    group.add_argument('--softirq_total', action='store_true',
                    help='Show total duration of each softirq for all cpus.')

    parser.add_argument('--theme', type=str, default='default',
                    choices=['default', 'clear', 'pro', 'matrix',
                             'windows', 'girly', 'dark', 'metro',
                             'elegant', 'grandpa', 'salad', 'serious',
                             'scream', 'dreamland', 'sand', 'mature'],
                    help='Color theme.')

    try:
        argcomplete.autocomplete(parser)
    except:
        pass

    return parser.parse_args()

def show_rq_pelt(hist=False):

    skiprows = 0

    while True:

        if skiprows:
            df = pd.read_csv("/tmp/rq_pelt.csv", skiprows=[i for i in range(2, skiprows)])
        else:
            df = pd.read_csv("/tmp/rq_pelt.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        skiprows += df.count().ts

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]
        skiprows -= df.count().ts

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = num_cpus if num_cpus < 4 else 4
        num_cpus_rows = math.ceil(num_cpus / num_cpus_cols) or 1

        plt.subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.theme(theme)
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu]

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1
            plt.subplot(row, col)
            df_cfs = df_cpu[df_cpu.type == "cfs"]
            df_rt = df_cpu[df_cpu.type == "rt"]
            df_dl = df_cpu[df_cpu.type == "dl"]
            if hist:
                bins = 100
                plt.hist(df_cfs.util.values, bins, label="cfs")
                plt.hist(df_rt.util.values, bins, label="rt")
                plt.hist(df_dl.util.values, bins, label="dl")
                plt.title("CPU{} util_avg Histogram".format(cpu))
            else:
                plt.plot(df_cfs.ts.values, df_cfs.util.values, label="cfs")
                plt.plot(df_rt.ts.values, df_rt.util.values, label="rt")
                plt.plot(df_dl.ts.values, df_dl.util.values, label="dl")
                plt.title("CPU{} util_avg".format(cpu))
            plt.grid(True, True)

        plt.show()
        time.sleep(refresh_rate)

def show_task_pelt():

    skiprows = 0

    while True:

        if skiprows:
            df = pd.read_csv("/tmp/task_pelt.csv", skiprows=[i for i in range(2, skiprows)])
        else:
            df = pd.read_csv("/tmp/task_pelt.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        skiprows += df.count().ts

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]
        skiprows -= df.count().ts

        df_top_comm = df.groupby(['pid', 'comm']).util.mean().sort_values(ascending=False)

        plt.cld()
        plt.clf()
        plt.theme(theme)
        for i in range(num_top_tasks):
            pid, comm = df_top_comm.index[i]
            df_comm = df[(df.pid == pid) & (df.comm == comm)]
            plt.plot(df_comm.ts.values, df_comm.util.values, label=comm+'::'+str(int(pid)))
        plt.title("Top {} Tasks util_avg".format(num_top_tasks))
        plt.grid(True, True)

        plt.show()
        time.sleep(refresh_rate)

def show_rq_nr_running(hist=False, residency=False):

    skiprows = 0

    while True:

        if skiprows:
            df = pd.read_csv("/tmp/rq_nr_running.csv", skiprows=[i for i in range(2, skiprows)])
        else:
            df = pd.read_csv("/tmp/rq_nr_running.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        skiprows += df.count().ts

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]
        skiprows -= df.count().ts

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = num_cpus if num_cpus < 4 else 4
        num_cpus_rows = math.ceil(num_cpus / num_cpus_cols) or 1

        plt.subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.theme(theme)
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu].copy()

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1
            plt.subplot(row, col)
            if hist:
                bins = 100
                plt.hist(df_cpu.nr_running.values, bins)
                plt.title("CPU{} nr_running Histogram".format(cpu))
            elif residency:
                df_cpu['duration'] = -1 * df_cpu.ts.diff(periods=-1)
                total_duration = df_cpu.duration.sum()
                df_duration = df_cpu.groupby('nr_running').duration.sum() * 100 / total_duration
                nr_running = sorted(df_cpu.nr_running.unique())
                nr_running = [str(len) if len else '-0-' for len in nr_running]
                plt.bar(nr_running, df_duration.values)
                plt.ylim(0, 100)
                plt.title("CPU{} nr_running Residency".format(cpu))
            else:
                plt.plot(df_cpu.ts.values, df_cpu.nr_running.values)
                plt.title("CPU{} nr_running".format(cpu))
            plt.grid(True, True)

        plt.show()
        time.sleep(refresh_rate)

def show_sched_switch(task=None):

    skiprows = 0

    while True:

        if skiprows:
            df = pd.read_csv("/tmp/task_pelt.csv", skiprows=[i for i in range(2, skiprows)])
        else:
            df = pd.read_csv("/tmp/task_pelt.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        skiprows += df.count().ts

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]
        skiprows -= df.count().ts

        num_cpus = len(df.cpu.unique())
        num_cpus_rows = num_cpus if num_cpus < 4 else 4
        num_cpus_cols = math.ceil(num_cpus / num_cpus_rows) or 1

        plt.subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.theme(theme)
        df = df[df.running == 1]
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu]

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1

            plt.subplot(row, col)

            df_top_comm = df_cpu.groupby(['pid', 'comm']).util.mean().sort_values(ascending=False)
            if df_top_comm.empty:
                continue

            num_top_busy = df_top_comm.count()
            num_top_busy = num_top_busy if num_top_tasks > num_top_busy else num_top_tasks

            for i in range(num_top_busy):
                pid, comm = df_top_comm.index[i]
                df_comm = df_cpu[(df_cpu.pid == pid) & (df_cpu.comm == comm)]
                if df_comm.empty:
                    continue
                plt.scatter(df_comm.ts.values, df_comm.running.values, label=comm+'::'+str(int(pid)))
                plt.ylim(0, 2)
            plt.title("CPU{} sched_switch".format(cpu))

        plt.show()
        time.sleep(refresh_rate)

def show_freq(residency=False):

    skiprows = 0

    while True:

        if skiprows:
            df = pd.read_csv("/tmp/freq_idle.csv", skiprows=[i for i in range(2, skiprows)])
        else:
            df = pd.read_csv("/tmp/freq_idle.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        skiprows += df.count().ts

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]
        skiprows -= df.count().ts

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = num_cpus if num_cpus < 4 else 4
        num_cpus_rows = math.ceil(num_cpus / num_cpus_cols) or 1

        plt.subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.theme(theme)
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu].copy()

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1

            plt.subplot(row, col)

            if residency:
                df_cpu['duration'] = -1 * df_cpu.ts.diff(periods=-1)
                total_duration = df_cpu.duration.sum()
                df_duration = df_cpu.groupby('freq').duration.sum() * 100 / total_duration
                freqs = sorted(df_cpu.freq.unique()/1000000)
                freqs = [str(freq)+'GHz' if freq else 'Idle' for freq in freqs]
                plt.bar(freqs, df_duration.values)
                plt.ylim(0, 100)
                plt.title("CPU{} Frequency Residency".format(cpu))
            else:
                plt.plot(df_cpu.ts.values, df_cpu.freq.values/1000000)
                plt.title("CPU{} Frequency (GHz)".format(cpu))
            plt.grid(True, True)

        plt.show()
        time.sleep(refresh_rate)

def show_idle(residency=False):

    skiprows = 0

    while True:

        if skiprows:
            df = pd.read_csv("/tmp/freq_idle.csv", skiprows=[i for i in range(2, skiprows)])
        else:
            df = pd.read_csv("/tmp/freq_idle.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        skiprows += df.count().ts

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]
        skiprows -= df.count().ts

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = num_cpus if num_cpus < 4 else 4
        num_cpus_rows = math.ceil(num_cpus / num_cpus_cols) or 1

        plt.subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.theme(theme)
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu].copy()

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1

            plt.subplot(row, col)

            if residency:
                df_cpu['duration'] = -1 * df_cpu.ts.diff(periods=-1)
                total_duration = df_cpu.duration.sum()
                df_duration = df_cpu.groupby('idle_state').duration.sum() * 100 / total_duration
                idle_states = sorted(df_cpu.idle_state.unique())
                idle_states = [str(state) if state != -1 else 'Running' for state in idle_states]
                plt.bar(idle_states, df_duration.values)
                plt.ylim(0, 100)
                plt.title("CPU{} Idle States Residency".format(cpu))
            else:
                plt.plot(df_cpu.ts.values, df_cpu.idle_state.values)
                plt.title("CPU{} Idle States".format(cpu))
            plt.grid(True, True)

        plt.show()
        time.sleep(refresh_rate)

def show_softirq(total=False):

    skiprows = 0

    while True:

        if skiprows:
            df = pd.read_csv("/tmp/softirq.csv", skiprows=[i for i in range(2, skiprows)])
        else:
            df = pd.read_csv("/tmp/softirq.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        skiprows += df.count().ts

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]
        skiprows -= df.count().ts

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = num_cpus if num_cpus < 4 else 4
        num_cpus_rows = math.ceil(num_cpus / num_cpus_cols) or 1

        plt.subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.theme(theme)
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu].copy()

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1

            plt.subplot(row, col)

            if total:
                df_duration = df_cpu.groupby('softirq').duration.sum()
                softirqs = sorted(df_cpu.softirq.unique())
                plt.bar(softirqs, df_duration.values/1000000.)
                plt.title("CPU{} Softirqs Total Duration (ms)".format(cpu))
            else:
                for softirq in df_cpu.softirq.unique():
                    df_softirq = df_cpu[df_cpu.softirq == softirq]
                    plt.scatter(df_softirq.ts.values, df_softirq.duration.values/1000000., label=softirq)
                plt.title("CPU{} Softirq Duration (ms)".format(cpu))
            plt.grid(True, True)

        plt.show()
        time.sleep(refresh_rate)

if __name__ == '__main__':
    args = parse_cmdline()
    refresh_rate = args.refresh_rate
    display_window = args.display_window
    theme = args.theme
    try:
        if args.task:
            num_top_tasks = args.task

        if args.rq:
            show_rq_pelt()

        if args.rq_hist:
            show_rq_pelt(hist=True)

        if args.nr_running:
            show_rq_nr_running()

        if args.nr_running_hist:
            show_rq_nr_running(hist=True)

        if args.nr_running_residency:
            show_rq_nr_running(residency=True)

        # if args.sched_switch:
        #     show_sched_switch()

        if args.freq:
            show_freq()

        if args.freq_residency:
            show_freq(residency=True)

        if args.idle:
            show_idle()

        if args.idle_residency:
            show_idle(residency=True)

        if args.softirq:
            show_softirq()

        if args.softirq_total:
            show_softirq(total=True)

        # Default view
        show_task_pelt()
    except Exception as e:
        plt.clt()
        print("Error:", e)
    except KeyboardInterrupt:
        plt.clt()
        pass
