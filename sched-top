#!/usr/bin/env python
#
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2022 Qais Yousef
import pandas as pd
import plotext as plt
import shlex
import subprocess
import time

refresh_rate = 5 # seconds
display_window = 20 #seconds

num_top_tasks = 10

def show_pelt():

    while True:

        df = pd.read_csv("/tmp/rq_pelt.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = 2
        num_cpus_rows = int(num_cpus / num_cpus_cols) or 1

        plt.subplots(3, 1)
        plt.subplot(1, 1).subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.clt()
        # plt.clf()
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu]

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1
            plt.subplot(1, 1).subplot(row, col)
            df_cfs = df_cpu[df_cpu.type == "cfs"]
            df_rt = df_cpu[df_cpu.type == "rt"]
            df_dl = df_cpu[df_cpu.type == "dl"]
            if num_cpus <= 8:
                plt.plot(df_cfs.ts.values, df_cfs.util.values, label="cfs")
                plt.plot(df_rt.ts.values, df_rt.util.values, label="rt")
                plt.plot(df_dl.ts.values, df_dl.util.values, label="dl")
            else:
                pelt_types = ["cfs", "rt", "dl"]
                pelt_mean = [df_cfs.util.mean(), df_rt.util.mean(), df_dl.util.mean()]
                plt.bar(pelt_types, pelt_mean, orientation="h", width=1/10)
                plt.xlim(0, 1024)
            plt.title("CPU{} util_avg".format(cpu))

        df = pd.read_csv("/tmp/rq_nr_running.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = 2
        num_cpus_rows = int(num_cpus / num_cpus_cols) or 1
        plt.subplot(2, 1).subplots(num_cpus_rows, num_cpus_cols)

        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu]

            if df_cpu.empty:
                continue

            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1
            plt.subplot(2, 1).subplot(row, col)
            plt.plot(df_cpu.ts.values, df_cpu.nr_running.values)
            plt.title("CPU{} nr_rnning".format(cpu))

        df = pd.read_csv("/tmp/task_pelt.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        last_ts = df.ts.iloc[-1] - display_window
        df = df[df.ts > last_ts]

        df_top_comms = df.groupby('comm').util.mean().sort_values(ascending=False)

        plt.subplot(3, 1)
        for i in range(num_top_tasks):
            comm = df_top_comms.index[i]
            df_comm = df[df.comm == comm]
            plt.plot(df_comm.ts.values, df_comm.util.values, label=comm)
            plt.title("Top {} Tasks util_avg".format(num_top_tasks))

        plt.show()
        time.sleep(refresh_rate)

if __name__ == '__main__':
    try:
        show_pelt()
    except Exception as e:
        print("Error:", e)
    except KeyboardInterrupt:
        pass
