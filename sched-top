#!/usr/bin/env python
#
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2022 Qais Yousef
import pandas as pd
import plotext as plt
import shlex
import subprocess
import time

refresh_rate = 5 # seconds
display_window = 20 #seconds

num_top_tasks = 10

def show_pelt():
    last_ts = -display_window + refresh_rate

    while True:

        df = pd.read_csv("/tmp/rq_pelt.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        df = df[df.ts > last_ts]

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        num_cpus = len(df.cpu.unique())
        num_cpus_cols = 2
        num_cpus_rows = int(num_cpus / num_cpus_cols) or 1

        plt.subplots(2, 1)
        plt.subplot(1, 1).subplots(num_cpus_rows, num_cpus_cols)

        plt.cld()
        plt.clt()
        # plt.clf()
        for cpu in range(num_cpus):
            df_cpu = df[df.cpu == cpu]
            row = int(cpu / num_cpus_cols) + 1
            col = cpu % num_cpus_cols + 1
            plt.subplot(1, 1).subplot(row, col)
            plt.plot(df_cpu.ts.values, df_cpu.util.values)
            plt.title("CPU {} util_avg".format(cpu))

        df = pd.read_csv("/tmp/task_pelt.csv")
        df.ts = df.ts - df.ts[0]
        df.ts = df.ts / 1000000000
        df = df[df.ts > last_ts]

        # We read in realtime, last row could end up being partially written.
        # dropping na should address this.
        df.dropna(inplace=True)

        df_top_comms = df.groupby('comm').util.mean().sort_values(ascending=False)

        plt.subplot(2, 1)
        for i in range(num_top_tasks):
            comm = df_top_comms.index[i]
            df_comm = df[df.comm == comm]
            plt.plot(df_comm.ts.values, df_comm.util.values, label=comm)
            plt.title("Top {} Tasks util_avg".format(num_top_tasks))

        plt.show()
        time.sleep(refresh_rate)
        last_ts += refresh_rate

if __name__ == '__main__':
    try:
        args = shlex.split("sudo ./sched-analyzer")
        subprocess.Popen(args)
        time.sleep(refresh_rate)
        show_pelt()
    except:
        args = shlex.split("sudo pkill -9 sched-analyzer")
        subprocess.Popen(args)
